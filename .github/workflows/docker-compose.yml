name: CI/CD Docker-compose

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'master'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      # Set up Docker Buildx
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Build and push Docker image
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ghcr.io/${{ github.actor }}/base-dockerized:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, label-go]
    steps:
      # Checkout source code
      - name: Check out source code
        uses: actions/checkout@v3

      # Set environment variables
      - name: Set environment variables
        run: |
          echo "GITHUB_ACTOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}" >> $GITHUB_ENV

       - name: Set environment variables
        run: |
          echo "GITHUB_ACTOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "REFRESH=${{ secrets.REFRESH }}" >> $GITHUB_ENV
          echo "ACCESS=${{ secrets.ACCESS }}" >> $GITHUB_ENV
          echo "REDISHOST=${{ secrets.REDISHOST }}" >> $GITHUB_ENV
          echo "REDISTPORT=${{ secrets.REDISTPORT }}" >> $GITHUB_ENV
          echo "REDISPASSWORD=${{ secrets.REDISPASSWORD }}" >> $GITHUB_ENV
          echo "REFRESHEXP=${{ secrets.REFRESHEXP }}" >> $GITHUB_ENV
          echo "ACCESSEXP=${{ secrets.ACCESSEXP }}" >> $GITHUB_ENV
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> $GITHUB_ENV
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> $GITHUB_ENV

      # Login to GHCR in deploy step
      - name: Login to GHCR
        run: echo $GHCR_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # Pull Docker images
      - name: Pull Docker images
        run: docker-compose -f /home/ubuntu/actions-runner/_work/quiz/quiz/docker-compose.yml pull

      # Stop and remove existing containers
      - name: Stop and remove existing containers
        run: docker-compose -f /home/ubuntu/actions-runner/_work/quiz/quiz/docker-compose.yml down

      # Remove old Docker images
      - name: Remove old Docker images
        run: docker image prune -f

      # Start services
      - name: Start services
        run: docker-compose -f /home/ubuntu/actions-runner/_work/quiz/quiz/docker-compose.yml up -d
